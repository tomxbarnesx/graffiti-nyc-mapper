<div id="map"></div>

<input id="address-input" class="form-control w-50 mt-2" type="text" placeholder="Search address">

<div id="form-container" style="display:none">
    <div id="form">
        <%= render "form" %>
    </div>
</div>

<div id="message">Location saved</div>

<script async defer src="https://maps.googleapis.com/maps/api/js?key=<%=ENV['GMAPS_KEY']%>&libraries=places&callback=initMap"></script>
<script>
    var map, infoWindow, marker, messagewindow;

    function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
            center: {lat: 40.706684, lng: -73.923059},
            zoom: 15
        });
        infoWindow = new google.maps.InfoWindow;

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function(position) {
            var pos = {
                lat: position.coords.latitude,
                lng: position.coords.longitude
            };

            infoWindow.setPosition(pos);
            infoWindow.setContent('Location found.');
            infoWindow.open(map);
            map.setCenter(pos);
            }, function() {
            handleLocationError(true, infoWindow, map.getCenter());
            });
        } else {
            handleLocationError(false, infoWindow, map.getCenter());
        }

        //START AUTOCOMPLETE

        var input = document.getElementById('address-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var searchMarkers = []

        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          searchMarkers.forEach(function(mark) {
            mark.setMap(null);
          });
          searchMarkers = [];

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.
            searchMarkers.push(new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
            }));

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });
        //END AUTOCOMPLETE

        var currentId = 0;
        var uniqueId = function() {
            return ++currentId;
        }
        

        <% counter = -1 %>

        var galleryMarkers = [
            <% @pieces.each do |p|%>
                {
                    <% counter += 1  %>
                    id: <%= counter %>,
                    position:{lat: <%= p.lat %> ,lng:<%= p.lng %>},
                    map: map
                },
            <% end %>
        ];

        var contentStrings = [
            <% @pieces.each do |p|%>
                {   
                    content: '<div id="display-<%=p.id%>" class="displayContent"><div class="photoWrapper"><a href="<%=p.photo_url%>" data-toggle="lightbox" data-height="850" data-width="1400" data-type="image"><%= image_tag p.photo, options = {width: "350", class: "image-fluid"} %></a></div><div class="photoText"><h3><%=p.title%></h3><p><strong>Artist: </strong><%=p.artist%><br><strong>Photo by: </strong><a href="/users/<%=p.user.id%>"><%=p.user.username%></a><br><strong>Post date: </strong> <%=p.post_date%></div><% if current_user %><% if current_user.id == p.user.id || current_user.is_admin == true %><%= link_to "Edit", edit_piece_path(p), remote:true %> â€¢ <%= link_to "Destroy", piece_path(p), method: :delete, remote:true, data: { confirm: "Are you sure?" } %><% else %><% end %><% end %></div>'
                },
            <% end %>
        ]

        var allWindows = [];
        var markerStack = [];

        for (let i = 0; i < <%=@plength%>; i++){
            var infowindow = new google.maps.InfoWindow(contentStrings[i]);
            allWindows.push(infowindow);
            var galMarker = new google.maps.Marker(galleryMarkers[i]);
            markerStack.push(galMarker);
            galMarker.infowindow = infowindow;
            galMarker.addListener('click', function() {
                return this.infowindow.open(map, this);
            });
        }

        google.maps.event.addListener(map, "click", function(event) {
            for (var i = 0; i < allWindows.length; i++ ) {
                allWindows[i].close();
            }
        });

        $(document).on('click', '[data-toggle="lightbox"]', function(event) {
                event.preventDefault();
                $(this).ekkoLightbox({
                    wrapping: false,
            })
        });

        infowindow = new google.maps.InfoWindow({
                    content: document.getElementById('form')
        });

        messagewindow = new google.maps.InfoWindow({
            content: document.getElementById('message')
        });
        
        var addToggle = false;
        var toggleCount = 0;
        var markerAdd;

        <% if current_user %>
        document.getElementById("add-button").addEventListener("click", () => {
            if (addToggle == false) {
                addToggle = true;

                document.getElementById("add-button").innerText = "Add Mode - On"
                console.log(addToggle);
                var geocoder = new google.maps.Geocoder;
                markerAdd = google.maps.event.addListener(map, 'click', function(event) {
                    newMarker = new google.maps.Marker({
                    position: event.latLng,
                    map: map,
                    draggable: true});
        
                    google.maps.event.addListener(newMarker, 'click', function() {
                        console.log(document.getElementById('form'));
                        infowindow.open(map, newMarker);
                        var latlng = newMarker.getPosition();
                        document.getElementById('lat').value = latlng.lat();
                        document.getElementById('lng').value = latlng.lng();

                        var geoLatLng = {lat: parseFloat(latlng.lat()), lng: parseFloat(latlng.lng())};
                        geocoder.geocode({'location': geoLatLng}, function(results, status) {
                            if (status === 'OK') {
                                 if (results[0]) {
                                    document.getElementById('address').value = results[0].formatted_address
                                } else {
                                    window.alert('No address results found. Feel free to fill in yourself or leave as "N/A"');
                                    document.getElementById('address').value = "N/A";
                                }
                            } else {
                                window.alert('Geocoder failed due to: ' + status);
                                document.getElementById('address').value = "N/A";
                            }
                        });
                    });
        
                    function handleLocationError(browserHasGeolocation, infoWindow, pos) {
                    infoWindow.setPosition(pos);
                    infoWindow.setContent(browserHasGeolocation ?
                                        'Error: The Geolocation service failed.' :
                                        'Error: Your browser doesn\'t support geolocation.');
                    infoWindow.open(map);
                        }

                    google.maps.event.addListener(map, "click", function(event) {
                        infowindow.close();
                    });
                    google.maps.event.removeListener(markerAdd);
                });
            } else {
                addToggle = false;
                document.getElementById("add-button").innerText = "Add Mode - Off";
                console.log(addToggle);
                newMarker.setMap(null);
                google.maps.event.removeListener(markerAdd);
            }
        })
    <% end %>
}

function geocodeLatLng(geocoder, map, infowindow) {
    var input = document.getElementById('latlng').value;
    var latlngStr = input.split(',', 2);
    var latlng = {lat: parseFloat(latlngStr[0]), lng: parseFloat(latlngStr[1])};
    geocoder.geocode({'location': latlng}, function(results, status) {
        if (status === 'OK') {
        if (results[0]) {
            map.setZoom(11);
            var geoSetMarker = new google.maps.Marker({
            position: latlng,
            map: map
            });
            infowindow.setContent(results[0].formatted_address);
            infowindow.open(map, geoSetMarker);
        } else {
            window.alert('No results found');
        }
        } else {
        window.alert('Geocoder failed due to: ' + status);
        }
    });
}

document.addEventListener("turbolinks:load", () => {
    var notice = document.getElementById("notice");
    var alert = document.getElementById("alert");
    if (notice.innerHTML == ""){
      notice.style.display = "none";
    }
    if (alert.innerHTML == "") {
      alert.style.display = "none";
    };
  })
</script>